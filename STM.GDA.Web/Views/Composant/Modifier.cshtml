@section Styles {
    <link href="@Url.Content("~/Content/ComposantModifier.css")" rel="stylesheet" type="text/css" />
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@model STM.GDA.Web.Models.ComposantModel

@Html.ActionLink("Retour à la liste", "Index")
<div class="container">
    <form id="formModification">
        <div class="col-md-5">
            <h3>Modification</h3>
            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Nom)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.Nom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Nom, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Abreviation)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.Abreviation, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Abreviation, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Version)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.Version, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Version, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Description)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Type)
                </div>
                <div class="col-md-9">
                    @Html.DropDownListFor(m => m.Type.Id, (IEnumerable<SelectListItem>)ViewBag.ListeTypes, new { @class = "form-control" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Responsables)
                </div>
                <div class="col-md-9">
                    @Html.ListBox("ResponsablesSelectionnes", new MultiSelectList((IEnumerable<SelectListItem>)ViewBag.ListeResponsables, "Value", "Text", Model.Responsables.Select(x => x.Id)), new { style = "width: 100%;" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Clients)
                </div>
                <div class="col-md-9">
                    @Html.ListBox("ClientsSelectionnes", new MultiSelectList((IEnumerable<SelectListItem>)ViewBag.ListeClients, "Value", "Text", Model.Clients.Select(x => x.Id)), new { style = "width: 100%;" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.NomBD)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.NomBD, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.NomBD, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.SourceControlPath)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.SourceControlPath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.SourceControlPath, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.BC)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.BC, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.BC, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.BW)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.BW, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.BW, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-7">
            <div class="col-md-12">
                <h3>Technologies</h3>
                @Html.DropDownList("Technologies", new SelectList((IEnumerable<SelectListItem>)ViewBag.ListeTechnologies, "Value", "Text"), new { style = "width: 100%;" })
                @Html.ListBox("TechnologiesSelectionnees", new SelectList(Model.Technologies.Select(x => new SelectListItem { Value = x.Id.ToString(), Text = x.Nom }), "Value", "Text"), new { @class = "form-control" })
            </div>

            <div class="col-md-12">
                <button type="button" id="btnSauvegarder" class="btn btn-default">Sauvegarder</button>
                <button type="button" id="btnAnnuler" class="btn btn-default">Annuler</button>
            </div>
        </div>
    </form>
</div>

<script>
    $(document).ready(function () {
        $("#ClientsSelectionnes").chosen({
            placeholder_text_multiple: "Sélectionnez un ou plusieurs clients",
            no_results_text: "Aucun résultat. Appuyez sur Entré ou Tab pour ajouter l'option",
            search_contains: true
        });

        $("#ResponsablesSelectionnes").chosen({
            placeholder_text_multiple: "Sélectionnez un ou plusieurs responsables",
            no_results_text: "Aucun résultat. Appuyez sur Entré ou Tab pour ajouter l'option",
            search_contains: true
        });

        $("#Technologies").chosen({
            placeholder_text_single: "Ajouter des technologies",
            no_results_text: "Aucun résultat. Appuyez sur Entré ou Tab pour ajouter l'option",
            search_contains: true
        });

        //Append the custom value add function declared in script.jsx`
        chosenMultiselectCustomAdd("ClientsSelectionnes");
        chosenMultiselectCustomAdd("ResponsablesSelectionnes");

        //Lets the user add a new technologie that is not already in the list
        //This function is a modified version of the function declared in script.js
        $("#Technologies_chosen").find("input").on("keydown", function (evt) {
            var stroke;
            stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
            if (stroke === 13) {
                textbox = $(evt.target);
                var nouvelleTechologie = $.trim(textbox.val());

                var technologiesActuelles = $("#TechnologiesSelectionnees option").map(function () { return $(this).text(); }).get();

                chosenList = textbox.parents('.chosen-container').find('.chosen-choices li.search-choice > span').map(function () { return $(this).text(); }).get();
                matchList = textbox.parents('.chosen-container').find('.chosen-results li').map(function () { return $(this).text(); }).get();   
                highlightedList = textbox.parents('.chosen-container').find('.chosen-results li.highlighted').map(function () { return $(this).text(); }).get();

                if (nouvelleTechologie != "" && $.inArray(nouvelleTechologie, technologiesActuelles) < 0 && $.inArray(nouvelleTechologie, chosenList) < 0
                    && $.inArray(nouvelleTechologie, chosenList) < 0 && highlightedList.length == 0) {
                    $('#TechnologiesSelectionnees').append($('<option>', {
                        value: 0,
                        text: nouvelleTechologie
                    }));
                }

                $("#Technologies").trigger("chosen:close");
            }
        }); 

        
    });

    //When a technology is selected, it is removed from the dropdown and added to the list of techologies
    $("#Technologies").change(function () {
        var technologie = $(this).find("option:selected").text();

        $("#TechnologiesSelectionnees").append($("<option>", {
            value: this.value,
            text: technologie
        }));

        //Here we check the text and not the value when deleting an option, because all new technologies will have an id of 0
        $("#Technologies option").filter(function () {
            return $.trim($(this).text()) == technologie
        }).remove();

        $("#Technologies").trigger("chosen:updated");
    });

    //Currently bound to dlb click because i did not feel like doing the pretty button
    $("#TechnologiesSelectionnees").dblclick(function () {
        var technologie = $(this).find("option:selected").text();

        //Add the removed techology to the dropdowm
        $("#Technologies").append($("<option>", {
            value: this.value,
            text: technologie
        }));

        $("#Technologies").trigger("chosen:updated");

        //Remove the technology form the list
        $("#TechnologiesSelectionnees option").filter(function () {
            return $.trim($(this).text()) == technologie
        }).remove();   
    });

    $("#btnAnnuler").click(function () {
        window.location.href = '@Url.Action("Details", "Composant", new { id = @Html.Raw(Json.Encode(Model.Id)) })';
    }); 

    $("#btnSauvegarder").click(function () {
        if ($('#formModification').valid()) {
            CallController(
                "@Url.Action("Modifier", "Composant")",
                {
                    composant: {
                        Id: @Html.Raw(Json.Encode(Model.Id)),
                        Nom: $("#Nom").val(),
                        Abreviation: $("#Abreviation").val(),
                        Version: $("#Version").val(),
                        Description: $("#Description").val(),
                        Type: { Id: $("#Type_Id").val(), Nom: null },
                        Responsables: getSelectedItems("ResponsablesSelectionnes"),
                        Clients: getSelectedItems("ClientsSelectionnes"),
                        NomBD: $("#NomBD").val(),
                        SourceControlPath: $("#SourceControlPath").val(),
                        BC: $("#BC").val(),
                        BW: $("#BW").val(),
                        Technologies: getAllItems("TechnologiesSelectionnees")
                    }
                }
            );
        }
    });
</script>
