@section Styles {
    <link href="@Url.Content("~/Content/ComposantModifier.css")" rel="stylesheet" type="text/css" />
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@model STM.GDA.Web.Models.ComposantModel

@Html.ActionLink("Retour à la liste", "Index")
<div class="container">
    <form id="formModification">
        <div class="col-md-5">
            <h3>Modification</h3>
            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Nom)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.Nom, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Nom, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Abreviation)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.Abreviation, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Abreviation, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Version)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.Version, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Version, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Description)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Type)
                </div>
                <div class="col-md-9">
                    @Html.DropDownListFor(m => m.Type.Id, (IEnumerable<SelectListItem>)ViewBag.ListeTypes, new { @class = "form-control" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Responsables)
                </div>
                <div class="col-md-9">
                    @Html.ListBox("ResponsablesSelectionnes", new MultiSelectList((IEnumerable<SelectListItem>)ViewBag.ListeResponsables, "Value", "Text", Model.Responsables.Select(x => x.Id)), new { style = "width: 100%;" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.Clients)
                </div>
                <div class="col-md-9">
                    @Html.ListBox("ClientsSelectionnes", new MultiSelectList((IEnumerable<SelectListItem>)ViewBag.ListeClients, "Value", "Text", Model.Clients.Select(x => x.Id)), new { style = "width: 100%;" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.NomBD)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.NomBD, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.NomBD, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.SourceControlPath)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.SourceControlPath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.SourceControlPath, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.BC)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.BC, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.BC, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="value">
                <div class="col-md-3 align-right">
                    @Html.DisplayNameFor(m => m.BW)
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(m => m.BW, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.BW, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-7">
            <div class="col-md-12">
                @Html.Partial("_ModifierTechnologies", Model.Technologies)
            </div>

            <div class="col-md-12">
                <h3>Environnements</h3>
                @Html.DropDownList("ddlEnvironnement", Model.EnvironnementsItems, new { @class = "form-control" })          
                @Html.Action("GetModifierDependances", new { composant = Model })
            </div>

            <div class="col-md-12">
                <button type="button" id="btnSauvegarder" class="btn btn-default">Sauvegarder</button>
                <button type="button" id="btnAnnuler" class="btn btn-default">Annuler</button>
            </div>
        </div>
    </form>
</div>

<script>
    $(document).ready(function () {
        $("#ClientsSelectionnes").chosen({
            placeholder_text_multiple: "Sélectionnez un ou plusieurs clients",
            no_results_text: "Aucun résultat. Appuyez sur Entrée ou Tab pour ajouter l'option",
            search_contains: true
        });

        $("#ResponsablesSelectionnes").chosen({
            placeholder_text_multiple: "Sélectionnez un ou plusieurs responsables",
            no_results_text: "Aucun résultat. Appuyez sur Entrée ou Tab pour ajouter l'option",
            search_contains: true
        });

        //Append the custom value add function declared in script.jsx`
        chosenMultiselectCustomAdd("ClientsSelectionnes");
        chosenMultiselectCustomAdd("ResponsablesSelectionnes");
    });

    $("#btnAnnuler").click(function () {
        window.location.href = '@Url.Action("Details", "Composant", new { id = @Html.Raw(Json.Encode(Model.Id)) })';
    }); 

    $("#ddlEnvironnement").on("change", function () { //initialize all the chosen in the first environnement selected
        if (typeof changeEnvironnement !== "undefined") {
            changeEnvironnement($("#ddlEnvironnement")[0].selectedIndex);
        }
    });

    $("#btnSauvegarder").click(function () {
        if ($('#formModification').valid()) {
            CallController(
                "@Url.Action("Modifier", "Composant")",
                {
                    composant: {
                        Id: @Html.Raw(Json.Encode(Model.Id)),
                        Nom: $("#Nom").val(),
                        Abreviation: $("#Abreviation").val(),
                        Version: $("#Version").val(),
                        Description: $("#Description").val(),
                        Type: { Id: $("#Type_Id").val(), Nom: null },
                        Responsables: getSelectedItems("ResponsablesSelectionnes"),
                        Clients: getSelectedItems("ClientsSelectionnes"),
                        NomBD: $("#NomBD").val(),
                        SourceControlPath: $("#SourceControlPath").val(),
                        BC: $("#BC").val(),
                        BW: $("#BW").val(),
                        Technologies: getAllItems("TechnologiesSelectionnees"),
                        Dependances: getDependanceEnvironnement()
                    }
                }
            );
        }
    });

    function getDependanceEnvironnement() { //get all dependance for all environnements
        var web = [];
        var BDs = [];
        var rapports = [];
        var interfaces = [];
        var jobs = [];
        var externes = [];
       
        for (var i = 0; i < $("#ddlEnvironnement option").length; i++) {    
            fillDependanceModel(web, "Web", i);
            fillDependanceModel(BDs, "BDs", i);
            fillDependanceModel(rapports, "Rapports", i);
            fillDependanceModel(interfaces, "Interfaces", i);
            fillDependanceModel(jobs, "Jobs", i);
            fillDependanceModel(externes, "Externes", i);
        }

        return {
            Web: web,
            BDs: BDs,
            Rapports: rapports,
            Interfaces: interfaces,
            Jobs: jobs,
            Externes: externes
        };
    }

    function fillDependanceModel(dependance, name, index) { //return a json string containing a dependance
        $("#environnement-" + name + "-" + index + " option:selected").each(function () {
            dependance.push({
                Etiquette: { Id: $(this).val(), Nom: $(this).text() },
                EnvironnementId: $("#ddlEnvironnement option")[index].value
            });
        });

        return dependance;
    }
</script>
